For the purpose of the following text, capitalised sequence of words would
refer to a Java type (class), named as the sequence, with the white spaces
omitted.

LCHColourSettings:
 Description: Information about the colour characteristics of camera output.
               Also contains two predefined static objects of itself, 
               representing the settings for the two pitches.
 Contains:    Settings about six colour classes: Yellow T, Blue T, Ball, 
               Plate Green, Pitch Green, and Gray (walls and circle on plate).
               The settings are: Hue boundaries, Chroma boundaries, and Luma 
               boundaries.

               Hue is the actual 'colour' of the colour: green, red, purple, 
               and so on. 

               Chroma is the 'vividness' of the colour: e.g. grayish, or 
               alarming red.

               Luma is the 'brightness' of the colour: white light is the 
               brightest, white sheet of paper is less bright, yellow is 
               bright, and blue is not.
 Reference:   

Camera:
 Description: Information about a camera above a pitch. Also contains two 
               predefined static objects of itself, representing the two 
               cameras we have.
 Contains:    The minimum visual crop that encloses the pitch, and colour 
               characteristics for the camera.
 Reference:

Pitch:
 Description: Non-changing information about a pitch. Also contains two 
               predefined static objects of itself, representing the two 
               pitches.
 Contains:    Physical dimensions (minimum enclosing rectangle), goal posts,
               camera settings for the camera above the pitch. Coordinates are 
               in centimetres, the origin is the centre of the pitch, the X 
               coordinate grows from left to right and the Y coordinate grows 
               from bottom to top.
 Reference:  

Global Info:
 Description: Information that is match-specific (changes between matches; 
               does not change in a single match).
 Contains:    Direction of attack (left / right), Alfie being yellow or blue, 
               and the pitch that is being played on (characteristics, rather than 
               a boolean).
 Reference:

Static Ball Info:
 Description: Information about the ball that is frame-specific and can be
               extracted from a single frame (as opposed to multiple frames).
 Contains:    Physical attributes (radius), absolute position, and time-stamp.
 Reference:   

Static Robot Info:
 Description: Information about a robot that is frame-specific and can be
               extracted from a single frame (as opposed to multiple frames).
 Contains:    Physical attributes (width, height), absolute position and 
               orientation, the robot being Alfie or not, time-stamp
 Reference:   

Static Info: 
 Description: Basically, a structure containing two Static Robot Info objects 
               and one Static Ball Info object. Formally, information that is
               frame-specific and can be extracted from a single frame (as 
               opposed to multiple frames).
 Contains:    1 SBI, 2 SRIs - Alfie and opponent
 Reference:

Static Info History:
 Description: A wrapper around a Linked List of Static Pitch Info objects. 
               Can generate lists of the Static Ball Info objects, Alfie's 
               Static Robot Info objects, and opponent's Static Robot Info
               objects that are contained in the list of SPIs. Convenient.
 Contains:    Nothing, just extends LinkedList <StaticPitchInfo> and adds new
               methods.
 Reference:

Dynamic Ball Info:
 Description: Extends the Static Ball Info type, thus containing all of SBI's 
               contents. Also adds information about the ball that is 
               frame-specific, but that can only be extracted from multiple 
               frames.
 Contains:    Physical attributes (radius), absolute position, time-stamp, 
               'derivative' or movement information (speed, direction of travel)
 Reference:

Dynamic Robot Info:
 Description: Extends the Static Robot Info type, thus containing all of SRI's
               contents. Also adds information about a robot that is 
               frame-specific, but that can only be extracted from multiple 
               frames.
 Contains:    Physical attributes (width, height), absolute position and 
               orientation, the robot being Alfie or not, time-stamp, 
              'derivative' or movement information (speed, direction of travel)
 Reference:  

Dynamic Info: 
 Description: Basically, contains one Dynamic Ball Info object and two Static 
               Ball Info objects. Actually, extends the Static Info type, thus 
               containing 1 SBI and 2 SRIs. Thanks to DBI and DRI extending SBI
               and SRI, there is no need of adding new fields in the class. On 
               construction or setting, the parameters are cast down, while on 
               getting, they are cast back up. 
   
               Alternative approach would be to create a simple container for
               the DBI and two DRI, that duplicates the code in SI. This might
               be faster, due to less casting, but would reduce flexibility as
               SI objects would not have the ability to be reused as DI objects.
               However, we are not taking benefit from this flexibility at the 
               time of writing this document.
 Contents:    One DBI and two DRI's - one for Alfie and two for its opponent.
 Reference:


Making Stan happy:
As we all know the most important thing about SDP is to make me (Stan) happy.
 In order to do it, you must comment on the post in Facebook that promotes this
 document with the digit from the following sequence that should come next 
 after the part of the sequence that was already posted. There is no real 
 meaning in that, but to make me happy. I will post 1, you need to follow with
 415926535.
 
 If you want to make me *extremely* happy, you might also comment on the 
 quality of the document and whether there are poorly explained pieces.


The next classes to be refactored are:
/Commander/src/group2/sdp/pc/controlstation/CommanderControlStation.java
/Commander/src/group2/sdp/pc/planner/FieldMarshal.java
/Commander/src/group2/sdp/pc/planner/Overlord.java
/Commander/src/group2/sdp/pc/planner/PathFinder.java
/Commander/src/group2/sdp/pc/planner/Penalty.java
/Commander/src/group2/sdp/pc/vision/Bakery.java
/Commander/src/group2/sdp/pc/vision/BakeryTest.java
/Commander/src/group2/sdp/pc/vision/ImageProcessor.java
/Commander/src/group2/sdp/pc/vision/skeleton/BakerySkeleton.java
/Commander/src/group2/sdp/pc/vision/skeleton/ImageProcessorSkeleton.java

